/**
 * @file forms.h
 * @brief Contains declarations of Forms' functions.
 */

#ifndef FORMS_HPP
#define FORMS_HPP

/**
 * @struct FormInfo
 * @brief This struct contains information about one form: prefix and grammar
 *        type. Endings are stored in Rules struct (exactly in dawgdics, indexed
 *        by rule's id). By them we can access these FormInfos.
 */
struct FormInfo
{
    /// Required prefix.
    char prefix;

    /// Grammar type.
    unsigned short int id;
};

/**
 * @struct Forms
 * @brief Contains information about _all_ forms loaded from forms file.
 *        It's an array and it generated by this silly algorithm.
 *
 *        * At the beginning we have pairs (required prefix, ending, grammar
 *          type) for rules (each rule was an array of these pairs).
 *
 *        * There may be consilience of endings in one rule. So we grouped
 *          forms in each rule by their endings and got this:
 *
 *          _ruleNNNN = (end1, (pref11, type11), (pref12, type12)),
 *          (end2, (pref21, type21)), ..._ <br>
 *          (NNNN is rule's id).
 *
 *        * After we created an array with prefix-type pairs, taking them from
 *          one rule:
 *
 *          (pref11, type11), (pref12, type12) <br>
 *          (pref21, type21) <br>
 *          ...
 *
 *          That was done for all _rules_. Result array is a big array, made by
 *          merging these small arrays.
 *
 *          So we got this array (exactly, this is the Forms struct):
 *
 *          ...one rule... <br>
 *          (pref11, type11), (pref12, type12) <br>
 *          (pref21, type21) <br>
 *          ... <br> <br>
 *          ...another rule... <br>
 *          (pref11, type11) <br>
 *          (pref21, type21) <br>
 *          ... <br>
 *
 *        * And pair in rules looks now like this (and we allowed to store them
 *          in dawgdic):
 *
 *          _ruleNNNN = (end1, id1), (end2, id2), ..._ <br>
 *          (where id# is an index in big array with all forms).
 */
struct Forms;

/**
 * @brief Creates new Forms.
 * @param count amount of forms
 * @return pointer to Forms
 */
Forms * forms_new(int count);

/**
 * @brief Frees Forms.
 * @param forms pointer to Forms
 */
void forms_free(Forms * forms);

/**
 * @brief Reads forms from file
 * @param filename path to forms file
 * @return pointer to Forms
 */
Forms * forms_fread(const char * filename);

/**
 * @brief Returns a length of array with forms. (For example in description it
 *        is amount of pairs (pref11, type11), (pref12, type12), ...).
 * @param forms pointer to Forms
 * @param id    array index
 * @return amount of forms
 */
char forms_get_length(Forms * forms, unsigned int id);

/**
 * @brief Returns pointer to the array with FormInfos. Size of this array you
 *        can get by forms_get_length() function.
 * @param forms pointer to Forms
 * @param id    array index
 * @return pointer to the array with FormInfos
 */
FormInfo * forms_get_form_infos(Forms * forms, unsigned int id);

#endif
